package com.bracits.epms.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllPropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllUpdatablePropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeUpdatableFieldsEquals(expected, actual);
        assertEmployeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAutoGeneratedPropertiesEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableFieldsEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee relevant properties")
            .satisfies(e -> assertThat(e.getFirstname()).as("check firstname").isEqualTo(actual.getFirstname()))
            .satisfies(e -> assertThat(e.getLastname()).as("check lastname").isEqualTo(actual.getLastname()))
            .satisfies(e -> assertThat(e.getPin()).as("check pin").isEqualTo(actual.getPin()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getEmployeeCategory()).as("check employeeCategory").isEqualTo(actual.getEmployeeCategory()))
            .satisfies(e -> assertThat(e.getDesignation()).as("check designation").isEqualTo(actual.getDesignation()))
            .satisfies(
                e -> assertThat(e.getFunctionalDesignation()).as("check functionalDesignation").isEqualTo(actual.getFunctionalDesignation())
            )
            .satisfies(e -> assertThat(e.getJoiningDate()).as("check joiningDate").isEqualTo(actual.getJoiningDate()))
            .satisfies(e -> assertThat(e.getCurrentOffice()).as("check currentOffice").isEqualTo(actual.getCurrentOffice()))
            .satisfies(e -> assertThat(e.getJobStatus()).as("check jobStatus").isEqualTo(actual.getJobStatus()))
            .satisfies(e -> assertThat(e.getEmployeeStatus()).as("check employeeStatus").isEqualTo(actual.getEmployeeStatus()))
            .satisfies(e -> assertThat(e.getDateOfBirth()).as("check dateOfBirth").isEqualTo(actual.getDateOfBirth()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getMobile()).as("check mobile").isEqualTo(actual.getMobile()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getGrade()).as("check grade").isEqualTo(actual.getGrade()))
            .satisfies(e -> assertThat(e.getProfile()).as("check profile").isEqualTo(actual.getProfile()))
            .satisfies(
                e -> assertThat(e.getProfileContentType()).as("check profile contenty type").isEqualTo(actual.getProfileContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableRelationshipsEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee relationships")
            .satisfies(e -> assertThat(e.getSupervisor()).as("check supervisor").isEqualTo(actual.getSupervisor()));
    }
}
